import { useEffect, useState, useRef } from "react";
import { marked } from "marked";

/**
 * Props interface for the MarkdownPreview component
 *
 * This component renders markdown content as HTML with scroll synchronization
 * capabilities to align with the editor pane.
 */
interface MarkdownPreviewProps {
  /** The markdown content to parse and render as HTML */
  content: string;
  /** Optional callback fired when the preview scrolls (returns scroll percentage 0-1) */
  onScroll?: (scrollPercentage: number) => void;
  /** Optional scroll position to sync to (percentage 0-1) */
  syncScrollTop?: number;
  /** Whether scroll synchronization is enabled */
  isScrollSyncEnabled?: boolean;
}

/**
 * MarkdownPreview Component
 *
 * Renders markdown content as styled HTML with GitHub-flavored appearance.
 * Features:
 * - Real-time markdown parsing using marked.js
 * - Scroll synchronization with editor pane
 * - Theme-aware styling (light/dark mode)
 * - Error handling for malformed markdown
 * - Percentage-based scroll alignment
 */
export default function MarkdownPreview({
  content,
  onScroll,
  syncScrollTop,
  isScrollSyncEnabled
}: MarkdownPreviewProps) {
  // State to hold the parsed HTML content
  const [html, setHtml] = useState("");
  // Ref to the scrollable container for direct DOM access
  const containerRef = useRef<HTMLDivElement>(null);
  // Flag to prevent infinite scroll loops during synchronization
  const isScrollingFromSync = useRef(false);

  /**
   * Effect to parse markdown content into HTML whenever content changes.
   * Uses marked.js for GitHub-flavored markdown parsing with error handling.
   */
  useEffect(() => {
    const parseMarkdown = async () => {
      try {
        // Parse the markdown content asynchronously
        const parsed = await marked.parse(content);
        setHtml(parsed);
      } catch (error) {
        // Handle parsing errors gracefully
        console.error("Error parsing markdown:", error);
        setHtml("<p>Error parsing markdown</p>");
      }
    };

    parseMarkdown();
  }, [content]); // Re-run whenever the markdown content changes

  /**
   * Handle scroll events for synchronization with the editor.
   * Calculates scroll percentage and reports it to parent component.
   */
  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {
    // Only handle scroll if callback exists and we're not currently syncing
    if (onScroll && !isScrollingFromSync.current) {
      const scrollTop = e.currentTarget.scrollTop;
      const scrollHeight = e.currentTarget.scrollHeight;
      const clientHeight = e.currentTarget.clientHeight;

      // Calculate scroll percentage (0-1) for consistent sync across different content heights
      const maxScroll = scrollHeight - clientHeight;
      const scrollPercentage = maxScroll > 0 ? scrollTop / maxScroll : 0;

      // Report scroll percentage to parent for editor synchronization
      onScroll(scrollPercentage);
    }
  };

  /**
   * Effect to handle scroll synchronization from the editor.
   * When the editor scrolls, this effect scrolls the preview to the
   * corresponding position based on the percentage received.
   */
  useEffect(() => {
    if (containerRef.current && syncScrollTop !== undefined && isScrollSyncEnabled) {
      // Set flag to prevent our own scroll event from triggering sync
      isScrollingFromSync.current = true;

      // Convert the received scroll percentage back to actual scroll position
      const scrollHeight = containerRef.current.scrollHeight;
      const clientHeight = containerRef.current.clientHeight;
      const maxScroll = scrollHeight - clientHeight;
      const targetScrollTop = maxScroll * syncScrollTop;

      // Apply the calculated scroll position to align with editor content
      containerRef.current.scrollTop = targetScrollTop;

      // Reset the flag after a brief delay to allow for smooth scrolling
      setTimeout(() => {
        isScrollingFromSync.current = false;
      }, 100);
    }
  }, [syncScrollTop, isScrollSyncEnabled]); // Re-run when sync values change

  return (
    <div
      ref={containerRef}
      className="h-full p-6 bg-white dark:bg-black overflow-auto"
      onScroll={handleScroll}
    >
      {/*
        Render the parsed HTML with GitHub-style markdown styling.
        Uses dangerouslySetInnerHTML to render the HTML generated by marked.js.
        The preview-content class applies GitHub-flavored markdown styling from App.css.
      */}
      <div
        className="preview-content max-w-none text-gray-900 dark:text-gray-300"
        dangerouslySetInnerHTML={{ __html: html }}
      />
    </div>
  );
}